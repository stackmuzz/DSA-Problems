 #include<iostream>#include<bits/stdc++.h>  using namespace std ;    class node {      public :      int data ;      node* next;            node(int data)      {          this->data =data;          this->next=NULL;      }  };    void insertAtHead(node* &head,int d){      node*temp=new node(d);      temp->next=head;      head=temp;              }  void insertAtTail(node* &tail,int d)    {     node* temp=new node(d);     tail->next=temp;     tail=temp;  }    void insertAtpos(node*head,node*tail,int pos,int d)  {      if(pos==1)      {          insertAtHead(head,d);          return;      }      node*temp=head;      int cnt=1;      while(cnt<pos-1)      {       temp= temp->next;       cnt++;      }      if(temp->next==NULL)      {          insertAtTail(tail,d);          return;      }            node* nodeToInsert =new node(d);      nodeToInsert->next=temp->next;      temp->next=nodeToInsert;  }    void print(node* &head)  {      node*temp=head;      while(temp !=NULL)      {          cout<<temp->data << " --> ";          temp=temp->next;      }      cout<<endl;  }    void search (node* head,int d)  {      node*temp=head;      while(temp !=NULL)      {          if((temp->data)==d)          {                            cout<<d<<" is present in the Linked List"<<endl;              return;          }          temp=temp->next;                }      cout<<d <<" is not present in the Linked List"<<endl;  }    void deleteAtpos(node*&head, int pos)  {      if(pos==1)      {          node*temp=head;          head=head->next;          temp->next=NULL;          delete temp;      }            else {          node*curr=head;          node*prev=NULL;          int cnt=1;          while (cnt<=pos)          {              prev=curr;              curr=curr->next;              cnt++;          }          prev->next=curr->next;          delete curr;      }  }     int main(){  node* node1=new node(10); node* head =node1; node*tail =node1; insertAtTail(tail,9);  insertAtTail(tail,8);   insertAtTail(tail,7);    insertAtTail(tail,6);     insertAtTail(tail,5);            print(head);            insertAtHead(head,11);      print(head);      insertAtpos(head,tail,3,0);      print(head);      search(head,5);      search(head,3);     delete(head,3);     print(head);      return 0;}  /*Output - 12->178->1788->NULL  345->12->178->1788->NULL  1 */